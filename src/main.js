const {HtmlTelegramBot, userInfoToString} = require("./bot");
const ChatGptService = require("./gpt");

class MyTelegramBot extends HtmlTelegramBot {
    constructor(token) {
        super(token);
        this.mode = null;
        this.list = []
        this.theme = null;
        this.user = {};
        this.count = 0;
    }

    async start(msg) {
        this.mode = "main"
        const text = this.loadMessage("main")
        await this.sendImage("main")
        await this.sendText(text)

        //add menu icon
        await this.showMainMenu({
            "start":"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
            "profile":"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé",
            "opener":"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
            "message":"–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
            "date":"–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
            "gpt":"–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†",
            "html":"–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è HTML"
        })
    }

    async html(msg) {
        const html = this.loadHtml("main")
        if(this.theme != null)
            await this.sendHTML(html, {theme: this.theme})
        else
            await this.sendText("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–∞—è —É –í–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–º–∞ –≤ Telegram!")
    }

    async gpt(msg) {
        this.mode = "gpt"
        await this.sendImage("gpt")
        const text = this.loadMessage("gpt")
        await this.sendText(text)
    }

    async gptDialog(msg) {
        const text = msg.text;
        const myMessage = await this.sendText("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É ChatGPT. –û–∂–∏–¥–∞–Ω–∏–µ...")
        const answer = await chatgpt.sendQuestion("–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", text)
        await this.editText(myMessage, answer)
    }

    async date(msg) {
        this.mode = "date"
        await this.sendImage("date")
        const text = this.loadMessage("date")
        await this.sendTextButtons(text, {
            "date_grande":"–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
            "date_robbie":"–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
            "date_zendaya":"–ó–µ–Ω–¥–µ—è",
            "date_gosling":"–†–∞–π–Ω –ì–æ—Å–ª–∏–Ω–≥",
            "date_hardy":"–¢–æ–º –•–∞—Ä–¥–∏"
        })
    }

    async dateDialog(msg) {
        const text = msg.text
        const myMessage = await this.sendText("–î–µ–≤—É—à–∫–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...")
        const answer = await chatgpt.addMessage(text)
        await this.editText(myMessage, answer)
    }

    async dateButton(callbackQuery) {
        const query = callbackQuery.data;
        await this.sendImage(query)
        await this.sendText("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏ –¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π:")
        const prompt = this.loadPrompt(query);
        chatgpt.setPrompt(prompt)
    }

    async message(msg) {
        this.list.clear
        this.mode = "message"
        await this.sendImage("message")
        const text = this.loadMessage("message")
        await this.sendTextButtons(text, {
            "message_next":"–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message_date":"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ"
        })

    }

    async messageButton(callbackQuery) {
        const query = callbackQuery.data;
        const prompt = this.loadPrompt(query)
        const userChatHistory = this.list.join("\n\n");
        const myMessage = await this.sendText("ChatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...")
        const answer = await chatgpt.sendQuestion(prompt, userChatHistory) // too long
        await this.editText(myMessage, answer)
    }

    async messageDialog(msg) {
        const text = msg.text
        this.list.push(text)
    }

    async profile(msg) {
        this.mode = "profile"
        const text = this.loadMessage("profile")
        await this.sendImage("profile")
        await this.sendText(text)

        this.user = {}
        await this.sendText("–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?")
    }

    async profileDialog(msg) {
        const text = msg.text
        this.count++;

        if(this.count === 1) {
            this.user["age"] = text;
            await this.sendText("–ö–µ–º –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
        }
        else if(this.count === 2) {
            this.user["occupation"] = text;
            await this.sendText("–£ –í–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?")
        }
        else if(this.count === 3) {
            this.user["hobby"] = text;
            await this.sendText("–ß—Ç–æ –í–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ª—é–¥—è—Ö?")
        }
        else if(this.count === 4) {
            this.user["annoys"] = text;
            await this.sendText("–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –í–∞—à–µ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
        }
        else if(this.count === 5) {
            this.user["goals"] = text;
            //gpt
            const prompt = this.loadPrompt("profile")
            const info = userInfoToString(this.user);
            const myMessage = await this.sendText("ChatGPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
            const answer = await chatgpt.sendQuestion(prompt, info);
            await this.editText(myMessage, answer)
            this.mode = null;
        }
    }

    async opener(msg) {
        this.mode = "opener"
        const text = this.loadMessage("opener")
        await this.sendImage("opener")
        await this.sendText(text)

        this.user = {}
        this.count = 0;
        await this.sendText("–ò–º—è –¥–µ–≤—É—à–∫–∏?")
    }

    async openerDialog(msg) {
        const text = msg.text
        this.count++;

        if(this.count === 1) {
            this.user["name"] = text;
            await this.sendText("–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?")
        }
        else if(this.count === 2) {
            this.user["age"] = text;
            await this.sendText("–û—Ü–µ–Ω–∏—Ç–µ –µ—ë –≤–Ω–µ—à–Ω–æ—Å—Ç—å –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10?")
        }
        else if(this.count === 3) {
            this.user["handsome"] = text;
            await this.sendText("–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?")
        }
        else if(this.count === 4) {
            this.user["occupation"] = text;
            await this.sendText("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
        }
        else if(this.count === 5) {
            this.user["goals"] = text;
            //gpt
            const prompt = this.loadPrompt("opener")
            const info = userInfoToString(this.user);
            const myMessage = await this.sendText("ChatGPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –í–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            const answer = await chatgpt.sendQuestion(prompt, info);
            await this.editText(myMessage, answer)
            this.mode = null;
        }
    }

    async hello(msg) {
        if(this.mode === "gpt")
            await this.gptDialog(msg);
        else if(this.mode === "date")
            await this.dateDialog(msg);
        else if(this.mode === "message")
            await this.messageDialog(msg);
        else if(this.mode === "profile")
            await this.profileDialog(msg);
        else if(this.mode === "opener")
            await this.openerDialog(msg);
        else if(this.theme === null) {
            await this.sendImage("avatar_main")
            await this.sendTextButtons("–ö–∞–∫–∞—è —É –í–∞—Å —Ç–µ–º–∞ –≤ Telegram?", {
                "theme_light": "–°–≤–µ—Ç–ª–∞—è",
                "theme_dark": "–¢—ë–º–Ω–∞—è",
            })
        }
        else
            await this.sendText("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞!")
    }

    async helloButton(callbackQuery) {
        const query = callbackQuery.data;
        if(query === "theme_light") {
            await this.sendText("–£ –í–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞")
            this.theme = "light"
        }
        else if(query === "theme_dark") {
            await this.sendText("–£ –í–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞")
            this.theme = "dark"
        }
    }
}


const chatgpt = new ChatGptService("gpt:9p4dgMGH8xaays5cTFbEJFkblB3TGdVvUMGZg2yosnt0BhOs");
const bot = new MyTelegramBot("7334196227:AAGMUt2oggOO8ewmK5aLcfNcAlQaeE_QK8g");

bot.onCommand(/\/start/, bot.start) // /start
bot.onCommand(/\/html/, bot.html) // /html
bot.onCommand(/\/gpt/, bot.gpt) // /gpt
bot.onCommand(/\/date/, bot.date) // /date
bot.onCommand(/\/message/, bot.message) // /message
bot.onCommand(/\/profile/, bot.profile) // /profile
bot.onCommand(/\/opener/, bot.opener) // /profile

bot.onTextMessage(bot.hello)
bot.onButtonCallback(/^.*/, bot.helloButton) // any string
bot.onButtonCallback(/^date_.*/, bot.dateButton)
bot.onButtonCallback(/^message_.*/, bot.messageButton)